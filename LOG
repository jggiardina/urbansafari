LOG for HW2

Attendees:
Ryan Conrad
Jeffrey Giardina
Will Ang

Overall Summary:

At first, our team started about 2 weeks ago filling in code for protocol_session, server, and client.  Will filled in code for the session, Ryan filled in for the server, and Jeff for the client.

We worked on this for 2 days but could not get anything compiled and was not sure whether we were actually filling in the code correctly.

From here we added assert.h and misc.h to let us use the NYI tool to fill in all of the ADD CODE parts so we could compile.  Once compiled, we walked through one at a time the errors, where Jeff would focus on client, Ryan on server, and Will on session.  Finally the code was all filled in and the RPC sessions were working passing data back and forth.  

The next step was getting the events updating and talking, so we looked into the server and client protocol code together and made the handlers on both sides and got update working.

RPC and EVENT code was now working and it was time to start the game.

-------------------------------------------------------------------------------------------------------------------

Will started on the tic tac toe logic for winning and drawing.  Ryan thought up the initial RPC and event calls we would need and coded them on the protocol_server and client, while Jeff did all of the input output for the client.c and worked also with server.c

From there we got the connect command working, and could not get disconnect yet so we put that off till later.

We worked on displaying the board and decided to pass it as a char array of 9 in the body as bytes, and we got the board to display.  Now was the time to hook up Will's logic with the marking rpc calls and they were fixed to work.  Then the other protocols like updating when a person marked a cell and events for when a user won was finished up along with logic for not your turn or invalid move, where Jeff implemented those on the client.c.

After testing and more testing the win and draw logic was perfect and the UI was fixed up by Jeff to look nice and clean with no extra lines or missing markers.  Finally it was time to do disconnect and that gave us a lot of trouble.  We could not get the event session and rpc session to close until we finally looked at post_event with a clean eye and copied it more or less from what we wrote and after tweaking it, was able to close the connection and let the other user know someone left.

This was out completed game...so then we tested more and got rid of some warnings for casting and such and cleaned up the comments and got rid of the NYI's and uneeded code that was commented out.

In summary, Ryan worked on server and session calls.  Will on the Board logic and calls for the board and marking the cells, and Jeff for the io for the user and UI, along with helping solve problems across the board and writing events, rpc's, and server code when Will or Ryan were bogged down.

DATED ENTRIES BELOW:

<FEB 9 2013>
Attendees: ALL^M
Questions:^M
-What is marshalling data?
-How to implement RPC call?
-What is post event for?^M
Decisions:^M
-Start looking through code and getting understanding for what each of the components do. ^M
Todo:^M
-Complete protocol_client.c: Jeff G.
-Complete protocol_server.c: Ryan C.
-Complete protocol_session.c: Will A.^M
Comments/Notes:^M
Assigned code parts to each person to work on, will come back together later with progress

<FEB 13 2013>^M
Attendees: ALL^M
Questions:^M
What is sbuf and rbuf for? Do we store the shdr and rhdr in there?
How to successfully disconnect client from server?^M
Decisions:^M
-Finish RPC calls and Event Channel^M
Todo:^M
-Go through all NYI and finish code to begin testing- Everyone^M
Comments/Notes:^M
added assert.h and misc.h to let us use the NYI tool to fill in all of the ADD CODE parts so we could compile. All subscriber loops and events loops completed in protocol_client and protocol_server. Still need RPC calls to begin testing msg sending.

<FEB 17 2013>
Attendees: All
Questions:
How to implement timeout in post event?
Where does post event get called and what is it for?
Decisions:
-Finish post event
TO DO:
-Finish post event: Everyone
Comments/Notes:
RPC calls and header sending is finished. Headers all have set length so we just read that off first to determine if/what is the body.

<FEB 18 2013>
Attendees: All
Questions:
Where to store game board data?
How to program connect/disconnect on command?
Decisions:
-Basic underlying code is finished, so now we need to work on actual tic tac toe code.
TO DO:
-Write client and client handlers: Jeff G.
-Write server handlers: Ryan C.
-Write game logic: Will A.
Comments/Notes:
Looked over tic-tac-toe pdf. Made list of functions we need to implement (connect, disconnect, move, etc).

<FEB 9 2013>^M
Attendees: ALL^M
Questions:^M
-What is marshalling data?
-How to implement RPC call?
-What is post event for?^M
Decisions:^M
-Start looking through code and getting understanding for what each of the components do. ^M
Todo:^M
-Complete protocol_client.c: Jeff G.
-Complete protocol_server.c: Ryan C.
-Complete protocol_session.c: Will A.^M
Comments/Notes:^M
Assigned code parts to each person to work on, will come back together later with progress

<FEB 13 2013>^M
Attendees: ALL^M
Questions:^M
What is sbuf and rbuf for? Do we store the shdr and rhdr in there?
How to successfully disconnect client from server?^M
Decisions:^M
-Finish RPC calls and Event Channel^M
Todo:^M
-Go through all NYI and finish code to begin testing- Everyone^M
Comments/Notes:^M
added assert.h and misc.h to let us use the NYI tool to fill in all of the ADD CODE parts so we could compile. All subscriber loops and events loops completed in protocol_client and protocol_server. Still need RPC calls to begin testing msg sending.

<FEB 17 2013>
Attendees: All
Questions:
How to implement timeout in post event?
Where does post event get called and what is it for?
Decisions:
-Finish post event
TO DO:
-Finish post event: Everyone
Comments/Notes:
RPC calls and header sending is finished. Headers all have set length so we just read that off first to determine if/what is the body.

<FEB 18 2013>
Attendees: All
Questions:
Where to store game board data?
How to program connect/disconnect on command?
Decisions:
-Basic underlying code is finished, so now we need to work on actual tic tac toe code.
TO DO:
-Write client and client handlers: Jeff G.
-Write server handlers: Ryan C.
-Write game logic: Will A.
Comments/Notes:
Looked over tic-tac-toe pdf. Made list of functions we need to implement (connect, disconnect, move, etc).

<FEB 19 2013>
Attendees: All
Questions:
What data are we sending from client to server?
Decisions:
-Decided upon standard for passing data.
-gstate.v0 = game is started?
-pstate.v0 = current player
-store board in body (9 char array)
TO DO:
-Continue working on client: Jeff G.
-Continue working on server: Ryan C.
-Continue working on game logic: Will A.
Comments/Notes:
ade sure that everyone agreed upon data standards.

<FEB 20 2013>
Attendees: All
Questions:
How to get disconnect working?
Decisions:
Get a working version done so we can test and figure out what to finish.

TO DO:
-Work on and test msg passing between client and server: Ryan C and Jeff G.
-Integrate client handler and game logic: Ryan C and Will A.
-Various bugs: Everyone
Comments/Notes:
Spent day in CS Lab finishing up most of the functions and logic for tic tac toe. Working prototype was achieved. Now need to finish disconnect and finish UI hiccups, as well as errors in logic that come up.

<FEB 21 2013>
Attendees: All
Questions:
What's a good compromise between intergration between protocol layers and client/server layers and seperation, in order to achieve optimal seperation of game code and hdr code?
Decisions:
Actual game code is too deeply tied into protocol files, which is non-ideal. We need to migrate most of the game logic functions into the respective client/server files.
TO DO:
-Finish disconnect: Ryan C and Jeff G.
-Seperate out protocol_server and server code into msg sending/game logic: Will A.
Comments/Notes:
Fine tuned tic tac toe game.

<FEB 22 2013>
Attendees: All
Questions:
What's a good compromise between intergration between protocol layers and client/server layers and seperation, in order to achieve optimal seperation of game code and hdr code?
Decisions:
Finish today, finish testing.
TO DO:
-Testing: Everyone
-Make final branch, finish log:everyone.
Comments/Notes:
Finished disconnect. Did final runthrough of all scenarios (win, lose, draw, too many subscribers, connect, disconnect, etc)

