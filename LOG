

<FEB 9 2013>
Attendees: ALL
Questions:
-What is marshalling data?
-How to implement RPC call?
-What is post event for?
Decisions:
-Start looking through code and getting understanding for what each of the components do. 
Todo:
-Complete protocol_client.c: Jeff G.
-Complete protocol_server.c: Ryan C.
-Complete protocol_session.c: Will A.
Comments/Notes:
Assigned code parts to each person to work on, will come back together later with progress

<FEB 13 2013>
Attendees: ALL
Questions:
What is sbuf and rbuf for? Do we store the shdr and rhdr in there?
How to successfully disconnect client from server?
Decisions:
-Finish RPC calls and Event Channel
Todo:
-Go through all NYI and finish code to begin testing- Everyone
Comments/Notes:
added assert.h and misc.h to let us use the NYI tool to fill in all of the ADD CODE parts so we could compile. All subscriber loops and events loops completed in protocol_client and protocol_server. Still need RPC calls to begin testing msg sending.

<FEB 17 2013>
Attendees: All
Questions:
How to implement timeout in post event?
Where does post event get called and what is it for?
Decisions:
-Finish post event
TO DO:
-Finish post event: Everyone
Comments/Notes:
RPC calls and header sending is finished. Headers all have set length so we just read that off first to determine if/what is the body.

<FEB 18 2013>
Attendees: All
Questions:
Where to store game board data?
How to program connect/disconnect on command?
Decisions:
-Basic underlying code is finished, so now we need to work on actual tic tac toe code.
TO DO:
-Write client and client handlers: Jeff G.
-Write server handlers: Ryan C.
-Write game logic: Will A.
Comments/Notes:
Looked over tic-tac-toe pdf. Made list of functions we need to implement (connect, disconnect, move, etc).

<FEB 19 2013>
Attendees: All
Questions:
What data are we sending from client to server?
Decisions:
-Decided upon standard for passing data.
-gstate.v0 = game is started?
-pstate.v0 = current player
-store board in body (9 char array)
TO DO:
-Continue working on client: Jeff G.
-Continue working on server: Ryan C.
-Continue working on game logic: Will A.
Comments/Notes:
Made sure that everyone agreed upon data standards.

<FEB 20 2013>
Attendees: All
Questions:
How to get disconnect working?
Decisions:
Get a working version done so we can test and figure out what to finish.

TO DO:
-Work on and test msg passing between client and server: Ryan C and Jeff G.
-Integrate client handler and game logic: Ryan C and Will A.
-Various bugs: Everyone
Comments/Notes:
Spent day in CS Lab finishing up most of the functions and logic for tic tac toe. Working prototype was achieved. Now need to finish disconnect and finish UI hiccups, as well as errors in logic that come up.

<FEB 21 2013>
Attendees: All
Questions:
What's a good compromise between intergration between protocol layers and client/server layers and seperation, in order to achieve optimal seperation of game code and hdr code?
Decisions:
Actual game code is too deeply tied into protocol files, which is non-ideal. We need to migrate most of the game logic functions into the respective client/server files.
TO DO:
-Finish disconnect: Ryan C and Jeff G.
-Seperate out protocol_server and server code into msg sending/game logic: Will A.
Comments/Notes:
Fine tuned tic tac toe game. 

<FEB 22 2013>
Attendees: All
Questions:
What's a good compromise between intergration between protocol layers and client/server layers and seperation, in order to achieve optimal seperation of game code and hdr code?
Decisions:
Finish today, finish testing.
TO DO:
-Testing: Everyone
-Make final branch, finish log:everyone.
Comments/Notes:
Finished disconnect. Did final runthrough of all scenarios (win, lose, draw, too many subscribers, connect, disconnect, etc)
